View(A102106)
View(A102106)
# CTPP Spread Example.R
# Import CTPP data and spread from list to matrix format
# Import Libraries
suppressMessages(library(tidyverse))
library(CTPPr)
# California County Means of Transportation
# A102106 -	MEANS OF TRANSPORTATION (18) (WORKERS 16 YEARS AND OVER)
A102106 <- download_ctpp(
id = "A102106",
dataset = "2016",
geography = "County",
state = "California",
output = "FIPS Code"
) %>%
select(-SE) %>%
spread("Means of Transportation 18","Estimate")
View(A102106)
CA_A102106 <- download_ctpp(
id = "A102106",
dataset = "2016",
geography = "County",
state = "California",
output = "FIPS Code"
)
data_estimate <- CA_A102106 %>%
select(-SE) %>%
spread("Means of Transportation 18","Estimate")
data_SE       <- CA_A102106 %>%
select(-ESTIMATE) %>%
spread("Means of Transportation 18","Estimate")
final         <- left_join(data_estimate,data_SE,by="RESIDENCE")
View(CA_A102106)
data_SE       <- CA_A102106 %>%
select(-Estimate) %>%
spread("Means of Transportation 18","Estimate")
final         <- left_join(data_estimate,data_SE,by="RESIDENCE")
View(CA_A102106)
View(CA_A102106)
names(CA_A102106)
data_SE       <- CA_A102106 %>%
select(-Estimate) %>%
spread("Means of Transportation 18","Estimate")
data_SE       <- CA_A102106 %>%
select(-"Estimate") %>%
spread("Means of Transportation 18","Estimate")
View(CA_A102106)
install.packages("xlsx")
library(xlsx)
library(tidycensus)
get_pums(
state="CA",
survey="acs1")
install.packages("tidycensus")
library(tidycensus)
get_pums(
state="CA",
survey="acs1")
get_pums(
variables = NULL,
state = NULL,
puma = NULL,
year = 2019,
survey = "acs1",
variables_filter = NULL,
rep_weights = NULL,
recode = FALSE,
show_call = FALSE,
key = NULL
)
get_pums(
variables = NULL,
state = "CA",
puma = NULL,
year = 2019,
survey = "acs1",
variables_filter = NULL,
rep_weights = NULL,
recode = FALSE,
show_call = FALSE,
key = NULL
)
get_pums(
state = "CA",
year = 2019,
survey = "acs1"
)
get_pums(
state = "CA",
year = 2019,
survey = "acs1",
key = "11b225edbbc4b7add43683c63297ee9a9d5e3d1e"
)
get_pums(
state = "CA",
year = 2019,
key = "11b225edbbc4b7add43683c63297ee9a9d5e3d1e"
)
library(tidyverse)
library(tidycensus)
get_pums(
state = "CA",
year = 2019,
key = "11b225edbbc4b7add43683c63297ee9a9d5e3d1e"
)
pums_vars_2018 <- pums_variables %>%
filter(year == 2018, survey == "acs1")
View(pums_vars_2018)
vt_pums <- get_pums(
variables = c("PUMA", "SEX", "AGEP", "SCHL"),
state = "VT",
survey = "acs1",
year = 2018
)
View(vt_pums)
View(vt_pums)
library(tidyverse)
library(tidycensus)
# The load_variables is important, since the variable names between
# the 2000-2020 censuses have changed! Be careful!
# 1990 PL94-171 isn't in the Census Bureau's API. Use NHGIS and the ipumsr package.
# varlist90 <- load_variables(1990,"pl",cache=FALSE)
varlist00 <- load_variables(2000,"pl",cache=FALSE)
varlist10 <- load_variables(2010,"pl",cache=FALSE)
varlist20 <- load_variables(2020,"pl",cache=FALSE)
remotes::install_github("walkerke/tidycensus")
library(tidyverse)
library(tidycensus)
# The load_variables is important, since the variable names between
# the 2000-2020 censuses have changed! Be careful!
# 1990 PL94-171 isn't in the Census Bureau's API. Use NHGIS and the ipumsr package.
# varlist90 <- load_variables(1990,"pl",cache=FALSE)
varlist00 <- load_variables(2000,"pl",cache=FALSE)
varlist10 <- load_variables(2010,"pl",cache=FALSE)
varlist20 <- load_variables(2020,"pl",cache=FALSE)
install.packages("rio")
library(dplyr)
library(tidyverse)
library(tidycensus)
library(xlsx)
library(rio)
varlist00 <- load_variables(2000,"pl",cache=FALSE)
varlist10 <- load_variables(2010,"pl",cache=FALSE)
varlist20 <- load_variables(2020,"pl",cache=FALSE)
varlist20 <- load_variables(2020,"pl",cache=FALSE)
Sys.getenv("Census_API_Key")
readRenviron("~/.Renviron")
varlist00 <- load_variables(2000,"pl",cache=FALSE)
varlist10 <- load_variables(2010,"pl",cache=FALSE)
varlist20 <- load_variables(2020,"pl",cache=FALSE)
selvars  <- c(TotalPop   = "P2_001N",   # Total Population
Hispanic   = "P2_002N",   # Hispanic or Latino
NH_White   = "P2_005N",   # Non-Hispanic, White alone
NH_Black   = "P2_006N",   # Non-Hispanic, Black or African American alone
NH_AIAN    = "P2_007N",   # Non-Hispanic, American Indian, Alaskan Native alone
NH_Asian   = "P2_008N",   # Non-Hispanic, Asian alone
NH_NHOPI   = "P2_009N",   # Non-Hispanic, Native Hawaiian, Other Pac Islander alone
NH_Other   = "P2_010N",   # Non-Hispanic, Other race alone
NH_Multi   = "P2_011N",   # Non-Hispanic, Two-or-More Races
VAP_Total  = "P4_001N",   # Total Population
VAP_Hisp   = "P4_002N",   # Hispanic or Latino
VAP_White  = "P4_005N",   # Non-Hispanic, White alone
VAP_Black  = "P4_006N",   # Non-Hispanic, Black or African American alone
VAP_AIAN   = "P4_007N",   # Non-Hispanic, American Indian, Alaskan Native alone
VAP_Asian  = "P4_008N",   # Non-Hispanic, Asian alone
VAP_NHOPI  = "P4_009N",   # Non-Hispanic, Native Hawaiian, Other Pac Islander alone
VAP_Other  = "P4_010N",   # Non-Hispanic, Other race alone
VAP_Multi  = "P4_011N",   # Non-Hispanic, Two-or-More Races
# New to the Census 2020 PL 94-171 is Group Quarters Population!!!
GQ_Total       = "P5_001N",   # Group Quarters Population, Total
GQ_Instit      = "P5_002N",   # GQ Pop, Institutionalized, Total
GQ_Correct     = "P5_003N",   # GQ Pop,  Correctional Facilities for Adults
GQ_Juvie       = "P5_004N",   # GQ Pop,  Correctional Facilities for Juveniles
GQ_Nursing     = "P5_005N",   # GQ Pop,  Nursing Facilities, Skilled-nursing Fac.
GQ_Instit_Oth  = "P5_006N",   # GQ Pop, Institutionalized, Other
GQ_NonInstit   = "P5_007N",   # GQ Pop, Noninstitutionalized, Total
GQ_College     = "P5_008N",   # GQ Pop, College/University student housing
GQ_Military    = "P5_009N",   # GQ Pop, Military Quarters
GQ_NonInst_Oth = "P5_010N",  # GQ Pop, Other noninstitutionalized
HousingUnits  = "H1_001N", # Total Housing Units
Occ_DU        = "H1_002N", # Occupied Housing Units
Vacant_DU     = "H1_003N") # Vacant Housing Units
b_CalPlace  <- get_decennial(year=2020,  sumfile="pl",
geography = "place",   state = "CA",
show_call = TRUE,output="wide", variables = selvars)
varlist00 <- load_variables(2000,cache=FALSE)
varlist00 <- load_variables(2000,dataset = "pl",cache=FALSE)
View(b_CalPlace)
install.packages("tidycensus")
library(tidycensus)
varlist <- load_variables(2020,"pl",cache=FALSE)
View(varlist)
ms_pums <- get_pums(
variables = c("SEX", "AGEP"),
state = "MS",
survey = "acs5",
year = 2019,
recode = TRUE
)
View(ms_pums)
ms_pums <- get_pums(
variables = c("SEX", "AGEP"),
survey = "acs5",
year = 2019,
recode = TRUE
)
library(tidycensus)
options(tigris_use_cache = TRUE)
dc_income <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "DC",
geometry = TRUE
)
dc_income
View(dc_income)
plot(dc_income["estimate"])
library(tigris)
library(tidyverse)
library(sf)
options(tigris_use_cache = TRUE)
# CRS used: NAD83(2011) Kansas Regional Coordinate System
# Zone 11 (for Kansas City)
ks_mo_tracts <- map_dfr(c("KS", "MO"), ~{
tracts(.x, cb = TRUE, year = 2020)
}) %>%
st_transform(8528)
kc_metro <- core_based_statistical_areas(cb = TRUE, year = 2020) %>%
filter(str_detect(NAME, "Kansas City")) %>%
st_transform(8528)
ggplot() +
geom_sf(data = ks_mo_tracts, fill = "white", color = "grey") +
geom_sf(data = kc_metro, fill = NA, color = "red") +
theme_void()
# CRS used: NAD83(2011) Kansas Regional Coordinate System
# Zone 11 (for Kansas City)
ks_mo_tracts <- map_dfr("CA", ~{
tracts(.x, cb = TRUE, year = 2020)
}) %>%
st_transform(8528)
kc_metro <- core_based_statistical_areas(cb = TRUE, year = 2020) %>%
filter(str_detect(NAME, "San Francisco")) %>%
st_transform(8528)
ggplot() +
geom_sf(data = ks_mo_tracts, fill = "white", color = "grey") +
geom_sf(data = kc_metro, fill = NA, color = "red") +
theme_void()
View(ks_mo_tracts)
View(ks_mo_tracts)
ggplot() +
geom_sf(data = ks_mo_tracts, fill = "white", color = "grey") +
geom_sf(data = kc_metro, fill = "yes", color = "red") +
theme_void()
ggplot() +
geom_sf(data = ks_mo_tracts, fill = "white", color = "grey") +
geom_sf(data = kc_metro, fill = "red", color = "red") +
theme_void()
View(kc_metro)
View(ks_mo_tracts)
library(tidycensus)
library(tidyverse)
library(segregation) # remotes::install_github("elbersb/segregation")
library(tigris)
library(sf)
# Get California tract data by race/ethnicity
ca_acs_data <- get_acs(
geography = "tract",
variables = c(
white = "B03002_003",
black = "B03002_004",
asian = "B03002_006",
hispanic = "B03002_012"
),
state = "CA",
geometry = TRUE,
year = 2019
)
# Use tidycensus to get urbanized areas by population with geometry,
# then filter for those that have populations of 750,000 or more
us_urban_areas <- get_acs(
geography = "urban area",
variables = "B01001_001",
geometry = TRUE,
year = 2019,
survey = "acs1"
) %>%
filter(estimate >= 750000) %>%
transmute(urban_name = str_remove(NAME,
fixed(", CA Urbanized Area (2010)")))
# Compute an inner spatial join between the California tracts and the
# urbanized areas, returning tracts in the largest California urban
# areas with the urban_name column appended
ca_urban_data <- ca_acs_data %>%
st_join(us_urban_areas, left = FALSE) %>%
select(-NAME) %>%
st_drop_geometry()
View(ca_urban_data)
View(ca_urban_data)
View(ca_acs_data)
View(ca_urban_data)
View(us_urban_areas)
us_urban_areas <- get_acs(
geography = "urban area",
variables = "B01001_001",
geometry = TRUE,
year = 2019,
survey = "acs1"
) %>%
filter(estimate >= 750000)
View(us_urban_areas)
View(us_urban_areas)
View(us_urban_areas)
us_urban_areas <- get_acs(
geography = "urban area",
variables = "B01001_001",
geometry = TRUE,
year = 2019,
survey = "acs1"
) %>%
filter(estimate >= 750000) %>%
transmute(urban_name = str_remove(NAME,
fixed(", CA Urbanized Area (2010)")))
View(us_urban_areas)
View(pums_variables)
# Create Census 2010 MAZ and TAZ shares of blockgroups.R
# ACS input data year should be set using the last year of a five year range using the ACS_eval_year variable
# e.g., for 2013-2017 - Sys.setenv(ACS_eval_year="2017")
# Notes
"
2010 decennial census household data at the block level were used to develop the share of households by block group.
That share can then be applied to any household-level distribution for TM2 MAZ/TAZ2 data development.
This script checks ACS year blockgroups against 2010 blockgroups to see if any of the ACS block groups have
households where Census 2010 was zero. This is important to ensure full apportionment of ACS data. In cases
that ACS block groups are >0 while Census 2010 values were zero, a straight apportionment to blocks is done
by the number of blocks in that block group.
"
# Import Libraries
# Remove scientific notation
suppressMessages(library(tidyverse))
library(tidycensus)
library(logger)
options(scipen=999)
# Set up directories, import TAZ/census block equivalence, install census key, set ACS year
censuskey            <- readLines("M:/Data/Census/API/api-key.txt")
census_api_key(censuskey, install = TRUE, overwrite = TRUE)
baycounties          <- c("01","13","41","55","75","81","85","95","97")
ACS_year            <- as.numeric(Sys.getenv("ACS_eval_year"))
sf1_year <- 2010
state_code ="06"
# Set up logger
logfile <- (paste0("ACS_",Sys.getenv("ACS_eval_year"),"_MAZ_TAZ_Crosswalk.log"))
if (file.exists(logfile)) {
#Delete file if it exists
file.remove(logfile)
}
log_appender(appender_tee(logfile))
log_info('Bringing in Census 2010 block-level total households.')
# Set input path locations and working directory
USERPROFILE          <- gsub("\\\\","/", Sys.getenv("USERPROFILE"))
block_MAZ_TAZ_in     <- file.path(USERPROFILE,"Documents","GitHub","travel-model-two","maz_taz","blocks_mazs_tazs_v2.2.csv")
wd <- file.path(USERPROFILE,"Documents","GitHub","travel-model-two","maz_taz","crosswalks")
setwd(wd)
# Make decennial census calls, configure file for later joining
totalhhs <- "H016001"           # 2010 variable for decennial total households
sf1_block_hhs <- get_decennial(geography = "block", variables = totalhhs,
state = state_code, county=baycounties,
year=2010,
output="wide",
key=censuskey) %>%
rename(GEOID10 = GEOID,hhs=H016001) %>%
mutate(GEOID10 = as.numeric(GEOID10)) %>%
select(-NAME)
# Bring in block to MAZ/TAZ equivalence and join with census HH file
block_MAZ_TAZ    <- read.csv(block_MAZ_TAZ_in,header = T) %>%
left_join(.,sf1_block_hhs,by="GEOID10")
# Generate block group ID from block strings (note that leading zero for state FIPS falls off in numeric conversion)
# Summarize household total by block group
# Calculate block share of total block group hhs
# The calculated shares will be used to apportion block group households to MAZs and TAZs
# Watch for divide-by-zero error when calculating shares in if/else statement
# Rename and order variables
bg_MAZ_TAZ    <- block_MAZ_TAZ %>%
mutate(bg=as.numeric(substr(GEOID10,1,11)))
bg_total <- bg_MAZ_TAZ %>%
group_by(bg) %>%
summarize(total_bg_hhs_2010=sum(hhs),total_blocks=n()) %>%
ungroup()
block_share <- bg_MAZ_TAZ %>%
left_join(.,bg_total,by="bg") %>%
mutate(sharebg=if_else(total_bg_hhs_2010==0,0,hhs/total_bg_hhs_2010)) %>%
rename(block=GEOID10,block_hhs=hhs,blockgroup=bg,taz2=taz) %>%
select(block,block_hhs,blockgroup,total_bg_hhs_2010,sharebg,maz,taz2)
log_info('There are {nrow(block_share)} blocks and {nrow(bg_total)} block groups in 2010.')
# Create apportionment for mazs with no households
# Start by creating a block group file with number block group ID, number of hhs in 2010 and the ACS year
acs_hhs <- get_acs(geography = "block group", variables = "B19001_001E",
state = state_code, county=baycounties,
year=ACS_year,
output="wide",
survey = "acs5",
key = censuskey) %>%
select(-B19001_001M) %>%
rename(bg=GEOID,total_bg_hhs_ACS=B19001_001E) %>%
mutate(bg=as.numeric(bg)) %>%
left_join(.,bg_total,by="bg") %>%
filter(total_bg_hhs_2010==0 & total_bg_hhs_ACS>0) %>%
mutate(bad_sharebg=1/total_blocks)
log_info("BG(s) with no hhs in Census 2010, yet some in ACS {ACS_year}: {acs_hhs$bg} with {acs_hhs$total_blocks} blocks")
log_info("Any such block groups will be apportioned to constituent blocks proportionately by number of blocks.")
block_share <- block_share %>%
left_join(.,select(acs_hhs,bg,bad_sharebg),by=c("blockgroup"="bg")) %>%
mutate(sharebg=if_else(!is.na(bad_sharebg),bad_sharebg,sharebg))
# Create files for maz and taz and output
maz_share_bg <- block_share %>% group_by(blockgroup,maz) %>% summarize(maz_share=sum(sharebg))
taz_share_bg <- block_share %>% group_by(blockgroup,taz2) %>% summarize(taz2_share=sum(sharebg))
write.csv(maz_share_bg,file = "Census 2010 hhs maz share of blockgroups.csv",row.names = F)
write.csv(taz_share_bg,file = "Census 2010 hhs taz2 share of blockgroups.csv",row.names = F)
# Create Census 2010 MAZ and TAZ shares of blockgroups.R
# ACS input data year should be set using the last year of a five year range using the ACS_eval_year variable
# e.g., for 2013-2017 - Sys.setenv(ACS_eval_year="2017")
# Notes
"
2010 decennial census household data at the block level were used to develop the share of households by block group.
That share can then be applied to any household-level distribution for TM2 MAZ/TAZ2 data development.
This script checks ACS year blockgroups against 2010 blockgroups to see if any of the ACS block groups have
households where Census 2010 was zero. This is important to ensure full apportionment of ACS data. In cases
that ACS block groups are >0 while Census 2010 values were zero, a straight apportionment to blocks is done
by the number of blocks in that block group.
"
# Import Libraries
# Remove scientific notation
suppressMessages(library(tidyverse))
library(tidycensus)
library(logger)
options(scipen=999)
# Set up directories, import TAZ/census block equivalence, install census key, set ACS year
censuskey            <- readLines("M:/Data/Census/API/api-key.txt")
census_api_key(censuskey, install = TRUE, overwrite = TRUE)
baycounties          <- c("01","13","41","55","75","81","85","95","97")
ACS_year            <- as.numeric(Sys.getenv("ACS_eval_year"))
sf1_year <- 2010
state_code ="06"
# Set up logger
logfile <- (paste0("ACS_",Sys.getenv("ACS_eval_year"),"_MAZ_TAZ_Crosswalk.log"))
if (file.exists(logfile)) {
#Delete file if it exists
file.remove(logfile)
}
log_appender(appender_tee(logfile))
log_info('Bringing in Census 2010 block-level total households.')
# Set input path locations and working directory
USERPROFILE          <- gsub("\\\\","/", Sys.getenv("USERPROFILE"))
block_MAZ_TAZ_in     <- file.path(USERPROFILE,"Documents","GitHub","travel-model-two","maz_taz","blocks_mazs_tazs_v2.2.csv")
wd <- file.path(USERPROFILE,"Documents","GitHub","travel-model-two","maz_taz","crosswalks")
setwd(wd)
# Make decennial census calls, configure file for later joining
totalhhs <- "H016001"           # 2010 variable for decennial total households
sf1_block_hhs <- get_decennial(geography = "block", variables = totalhhs,
state = state_code, county=baycounties,
year=2010,
output="wide",
key=censuskey) %>%
rename(GEOID10 = GEOID,hhs=H016001) %>%
mutate(GEOID10 = as.numeric(GEOID10)) %>%
select(-NAME)
# Bring in block to MAZ/TAZ equivalence and join with census HH file
block_MAZ_TAZ    <- read.csv(block_MAZ_TAZ_in,header = T) %>%
left_join(.,sf1_block_hhs,by="GEOID10")
# Generate block group ID from block strings (note that leading zero for state FIPS falls off in numeric conversion)
# Summarize household total by block group
# Calculate block share of total block group hhs
# The calculated shares will be used to apportion block group households to MAZs and TAZs
# Watch for divide-by-zero error when calculating shares in if/else statement
# Rename and order variables
bg_MAZ_TAZ    <- block_MAZ_TAZ %>%
mutate(bg=as.numeric(substr(GEOID10,1,11)))
bg_total <- bg_MAZ_TAZ %>%
group_by(bg) %>%
summarize(total_bg_hhs_2010=sum(hhs),total_blocks=n()) %>%
ungroup()
block_share <- bg_MAZ_TAZ %>%
left_join(.,bg_total,by="bg") %>%
mutate(sharebg=if_else(total_bg_hhs_2010==0,0,hhs/total_bg_hhs_2010)) %>%
rename(block=GEOID10,block_hhs=hhs,blockgroup=bg,taz2=taz) %>%
select(block,block_hhs,blockgroup,total_bg_hhs_2010,sharebg,maz,taz2)
log_info('There are {nrow(block_share)} blocks and {nrow(bg_total)} block groups in 2010.')
# Create apportionment for mazs with no households
# Start by creating a block group file with number block group ID, number of hhs in 2010 and the ACS year
acs_hhs <- get_acs(geography = "block group", variables = "B19001_001E",
state = state_code, county=baycounties,
year=ACS_year,
output="wide",
survey = "acs5",
key = censuskey) %>%
select(-B19001_001M) %>%
rename(bg=GEOID,total_bg_hhs_ACS=B19001_001E) %>%
mutate(bg=as.numeric(bg)) %>%
left_join(.,bg_total,by="bg") %>%
filter(total_bg_hhs_2010==0 & total_bg_hhs_ACS>0) %>%
mutate(bad_sharebg=1/total_blocks)
log_info("BG(s) with no hhs in Census 2010, yet some in ACS {ACS_year}: {acs_hhs$bg} with {acs_hhs$total_blocks} blocks")
log_info("Any such block groups will be apportioned to constituent blocks proportionately by number of blocks.")
block_share <- block_share %>%
left_join(.,select(acs_hhs,bg,bad_sharebg),by=c("blockgroup"="bg")) %>%
mutate(sharebg=if_else(!is.na(bad_sharebg),bad_sharebg,sharebg))
# Create files for maz and taz and output
maz_share_bg <- block_share %>% group_by(blockgroup,maz) %>% summarize(maz_share=sum(sharebg))
taz_share_bg <- block_share %>% group_by(blockgroup,taz2) %>% summarize(taz2_share=sum(sharebg))
write.csv(maz_share_bg,file = "Census 2010 hhs maz share of blockgroups.csv",row.names = F)
write.csv(taz_share_bg,file = "Census 2010 hhs taz2 share of blockgroups.csv",row.names = F)
Sys.setenv(ACS_eval_year="2017")
